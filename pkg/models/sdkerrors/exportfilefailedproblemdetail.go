// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package sdkerrors

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/naumanali/v3/pkg/models/shared"
)

// SchemasExportFileFailedProblemDetailProblemDetailStatus - The HTTP status code generated by the origin server for this occurrence of the problem.
type SchemasExportFileFailedProblemDetailProblemDetailStatus int64

const (
	SchemasExportFileFailedProblemDetailProblemDetailStatusFourHundred              SchemasExportFileFailedProblemDetailProblemDetailStatus = 400
	SchemasExportFileFailedProblemDetailProblemDetailStatusFourHundredAndOne        SchemasExportFileFailedProblemDetailProblemDetailStatus = 401
	SchemasExportFileFailedProblemDetailProblemDetailStatusFourHundredAndTwo        SchemasExportFileFailedProblemDetailProblemDetailStatus = 402
	SchemasExportFileFailedProblemDetailProblemDetailStatusFourHundredAndThree      SchemasExportFileFailedProblemDetailProblemDetailStatus = 403
	SchemasExportFileFailedProblemDetailProblemDetailStatusFourHundredAndFour       SchemasExportFileFailedProblemDetailProblemDetailStatus = 404
	SchemasExportFileFailedProblemDetailProblemDetailStatusFourHundredAndNine       SchemasExportFileFailedProblemDetailProblemDetailStatus = 409
	SchemasExportFileFailedProblemDetailProblemDetailStatusFourHundredAndTwentyNine SchemasExportFileFailedProblemDetailProblemDetailStatus = 429
	SchemasExportFileFailedProblemDetailProblemDetailStatusFiveHundred              SchemasExportFileFailedProblemDetailProblemDetailStatus = 500
)

func (e SchemasExportFileFailedProblemDetailProblemDetailStatus) ToPointer() *SchemasExportFileFailedProblemDetailProblemDetailStatus {
	return &e
}

func (e *SchemasExportFileFailedProblemDetailProblemDetailStatus) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 400:
		fallthrough
	case 401:
		fallthrough
	case 402:
		fallthrough
	case 403:
		fallthrough
	case 404:
		fallthrough
	case 409:
		fallthrough
	case 429:
		fallthrough
	case 500:
		*e = SchemasExportFileFailedProblemDetailProblemDetailStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasExportFileFailedProblemDetailProblemDetailStatus: %v", v)
	}
}

// ExportFileFailedProblemDetail - Represents when the export request is well-formed, but the server was unable to successfully export the requested file.
type ExportFileFailedProblemDetail struct {
	// A human-readable explanation specific to this occurrence of the problem.
	Detail         *string                `json:"detail,omitempty"`
	ExportProblems []shared.ExportProblem `json:"export_problems"`
	// A URI reference that identifies the specific occurrence of the problem.
	Instance *string                                                 `json:"instance,omitempty"`
	Status   SchemasExportFileFailedProblemDetailProblemDetailStatus `json:"status"`
	// A short, human-readable summary of the problem type.
	Title string `json:"title"`
	// A URI reference that identifies the problem type.
	Type string `json:"type"`
}

var _ error = &ExportFileFailedProblemDetail{}

func (e *ExportFileFailedProblemDetail) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}
