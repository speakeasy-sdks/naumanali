// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package sdkerrors

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/naumanali/v3/pkg/models/shared"
)

// ProblemDetailStatus - The HTTP status code generated by the origin server for this occurrence of the problem.
type ProblemDetailStatus int64

const (
	ProblemDetailStatusFourHundred              ProblemDetailStatus = 400
	ProblemDetailStatusFourHundredAndOne        ProblemDetailStatus = 401
	ProblemDetailStatusFourHundredAndTwo        ProblemDetailStatus = 402
	ProblemDetailStatusFourHundredAndThree      ProblemDetailStatus = 403
	ProblemDetailStatusFourHundredAndFour       ProblemDetailStatus = 404
	ProblemDetailStatusFourHundredAndNine       ProblemDetailStatus = 409
	ProblemDetailStatusFourHundredAndTwentyNine ProblemDetailStatus = 429
	ProblemDetailStatusFiveHundred              ProblemDetailStatus = 500
)

func (e ProblemDetailStatus) ToPointer() *ProblemDetailStatus {
	return &e
}

func (e *ProblemDetailStatus) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 400:
		fallthrough
	case 401:
		fallthrough
	case 402:
		fallthrough
	case 403:
		fallthrough
	case 404:
		fallthrough
	case 409:
		fallthrough
	case 429:
		fallthrough
	case 500:
		*e = ProblemDetailStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProblemDetailStatus: %v", v)
	}
}

// BadRequestProblemDetail - Represents when the server could not understand the request due to invalid syntax.
type BadRequestProblemDetail struct {
	// A human-readable explanation specific to this occurrence of the problem.
	Detail *string `json:"detail,omitempty"`
	// A URI reference that identifies the specific occurrence of the problem.
	Instance          *string                   `json:"instance,omitempty"`
	InvalidParameters []shared.InvalidParameter `json:"invalid_parameters"`
	Status            ProblemDetailStatus       `json:"status"`
	// A short, human-readable summary of the problem type.
	Title string `json:"title"`
	// A URI reference that identifies the problem type.
	Type string `json:"type"`
}

var _ error = &BadRequestProblemDetail{}

func (e *BadRequestProblemDetail) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}
