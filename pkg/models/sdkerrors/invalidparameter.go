// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package sdkerrors

import (
	"encoding/json"
	"fmt"
)

// In - The location of the invalid parameter
type In string

const (
	InBody   In = "body"
	InHeader In = "header"
	InPath   In = "path"
	InQuery  In = "query"
)

func (e In) ToPointer() *In {
	return &e
}

func (e *In) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "body":
		fallthrough
	case "header":
		fallthrough
	case "path":
		fallthrough
	case "query":
		*e = In(v)
		return nil
	default:
		return fmt.Errorf("invalid value for In: %v", v)
	}
}

// InvalidParameter - Details why a certain parameter is invalid.
type InvalidParameter struct {
	// A human-readable explanation.
	Detail *string `json:"detail,omitempty"`
	In     In      `json:"in"`
	// The name of the invalid parameter
	Name *string `json:"name,omitempty"`
	// The JSON Path in the schema that the invalid parameter violated
	Path *string `json:"path,omitempty"`
	// The reason this parameter is invalid
	Title string `json:"title"`
	// A URI reference that identifies the problem type.
	Type string `json:"type"`
}

func (o *InvalidParameter) GetDetail() *string {
	if o == nil {
		return nil
	}
	return o.Detail
}

func (o *InvalidParameter) GetIn() In {
	if o == nil {
		return In("")
	}
	return o.In
}

func (o *InvalidParameter) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *InvalidParameter) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *InvalidParameter) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *InvalidParameter) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}
