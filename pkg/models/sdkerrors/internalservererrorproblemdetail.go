// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package sdkerrors

import (
	"encoding/json"
	"fmt"
)

// SchemasInternalServerErrorProblemDetailProblemDetailStatus - The HTTP status code generated by the origin server for this occurrence of the problem.
type SchemasInternalServerErrorProblemDetailProblemDetailStatus int64

const (
	SchemasInternalServerErrorProblemDetailProblemDetailStatusFourHundred              SchemasInternalServerErrorProblemDetailProblemDetailStatus = 400
	SchemasInternalServerErrorProblemDetailProblemDetailStatusFourHundredAndOne        SchemasInternalServerErrorProblemDetailProblemDetailStatus = 401
	SchemasInternalServerErrorProblemDetailProblemDetailStatusFourHundredAndTwo        SchemasInternalServerErrorProblemDetailProblemDetailStatus = 402
	SchemasInternalServerErrorProblemDetailProblemDetailStatusFourHundredAndThree      SchemasInternalServerErrorProblemDetailProblemDetailStatus = 403
	SchemasInternalServerErrorProblemDetailProblemDetailStatusFourHundredAndFour       SchemasInternalServerErrorProblemDetailProblemDetailStatus = 404
	SchemasInternalServerErrorProblemDetailProblemDetailStatusFourHundredAndNine       SchemasInternalServerErrorProblemDetailProblemDetailStatus = 409
	SchemasInternalServerErrorProblemDetailProblemDetailStatusFourHundredAndTwentyNine SchemasInternalServerErrorProblemDetailProblemDetailStatus = 429
	SchemasInternalServerErrorProblemDetailProblemDetailStatusFiveHundred              SchemasInternalServerErrorProblemDetailProblemDetailStatus = 500
)

func (e SchemasInternalServerErrorProblemDetailProblemDetailStatus) ToPointer() *SchemasInternalServerErrorProblemDetailProblemDetailStatus {
	return &e
}

func (e *SchemasInternalServerErrorProblemDetailProblemDetailStatus) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 400:
		fallthrough
	case 401:
		fallthrough
	case 402:
		fallthrough
	case 403:
		fallthrough
	case 404:
		fallthrough
	case 409:
		fallthrough
	case 429:
		fallthrough
	case 500:
		*e = SchemasInternalServerErrorProblemDetailProblemDetailStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasInternalServerErrorProblemDetailProblemDetailStatus: %v", v)
	}
}

// InternalServerErrorProblemDetail - Represents when the server has encountered a situation it doesn't know how to handle.
type InternalServerErrorProblemDetail struct {
	// A human-readable explanation specific to this occurrence of the problem.
	Detail *string `json:"detail,omitempty"`
	// A URI reference that identifies the specific occurrence of the problem.
	Instance *string                                                    `json:"instance,omitempty"`
	Status   SchemasInternalServerErrorProblemDetailProblemDetailStatus `json:"status"`
	// A short, human-readable summary of the problem type.
	Title string `json:"title"`
	// A URI reference that identifies the problem type.
	Type string `json:"type"`
}

var _ error = &InternalServerErrorProblemDetail{}

func (e *InternalServerErrorProblemDetail) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}
