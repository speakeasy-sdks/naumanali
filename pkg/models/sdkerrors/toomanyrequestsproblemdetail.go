// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package sdkerrors

import (
	"encoding/json"
	"fmt"
)

// SchemasTooManyRequestsProblemDetailProblemDetailStatus - The HTTP status code generated by the origin server for this occurrence of the problem.
type SchemasTooManyRequestsProblemDetailProblemDetailStatus int64

const (
	SchemasTooManyRequestsProblemDetailProblemDetailStatusFourHundred              SchemasTooManyRequestsProblemDetailProblemDetailStatus = 400
	SchemasTooManyRequestsProblemDetailProblemDetailStatusFourHundredAndOne        SchemasTooManyRequestsProblemDetailProblemDetailStatus = 401
	SchemasTooManyRequestsProblemDetailProblemDetailStatusFourHundredAndTwo        SchemasTooManyRequestsProblemDetailProblemDetailStatus = 402
	SchemasTooManyRequestsProblemDetailProblemDetailStatusFourHundredAndThree      SchemasTooManyRequestsProblemDetailProblemDetailStatus = 403
	SchemasTooManyRequestsProblemDetailProblemDetailStatusFourHundredAndFour       SchemasTooManyRequestsProblemDetailProblemDetailStatus = 404
	SchemasTooManyRequestsProblemDetailProblemDetailStatusFourHundredAndNine       SchemasTooManyRequestsProblemDetailProblemDetailStatus = 409
	SchemasTooManyRequestsProblemDetailProblemDetailStatusFourHundredAndTwentyNine SchemasTooManyRequestsProblemDetailProblemDetailStatus = 429
	SchemasTooManyRequestsProblemDetailProblemDetailStatusFiveHundred              SchemasTooManyRequestsProblemDetailProblemDetailStatus = 500
)

func (e SchemasTooManyRequestsProblemDetailProblemDetailStatus) ToPointer() *SchemasTooManyRequestsProblemDetailProblemDetailStatus {
	return &e
}

func (e *SchemasTooManyRequestsProblemDetailProblemDetailStatus) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 400:
		fallthrough
	case 401:
		fallthrough
	case 402:
		fallthrough
	case 403:
		fallthrough
	case 404:
		fallthrough
	case 409:
		fallthrough
	case 429:
		fallthrough
	case 500:
		*e = SchemasTooManyRequestsProblemDetailProblemDetailStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasTooManyRequestsProblemDetailProblemDetailStatus: %v", v)
	}
}

// TooManyRequestsProblemDetail - Represents when the client has exhausted its rate limiting quota.
type TooManyRequestsProblemDetail struct {
	// A human-readable explanation specific to this occurrence of the problem.
	Detail *string `json:"detail,omitempty"`
	// A URI reference that identifies the specific occurrence of the problem.
	Instance *string `json:"instance,omitempty"`
	// The number of seconds to wait to retry the request again.
	RetryAfter *int                                                   `json:"retry_after,omitempty"`
	Status     SchemasTooManyRequestsProblemDetailProblemDetailStatus `json:"status"`
	// A short, human-readable summary of the problem type.
	Title string `json:"title"`
	// A URI reference that identifies the problem type.
	Type string `json:"type"`
}

var _ error = &TooManyRequestsProblemDetail{}

func (e *TooManyRequestsProblemDetail) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}
